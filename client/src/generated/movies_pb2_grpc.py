# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import generated.movies_pb2 as movies__pb2


class MongoMoviesStub(object):
    """serviço
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getMoviesById = channel.unary_unary(
                '/mongomovies.MongoMovies/getMoviesById',
                request_serializer=movies__pb2.Request.SerializeToString,
                response_deserializer=movies__pb2.Response.FromString,
                )
        self.deleteMovie = channel.unary_unary(
                '/mongomovies.MongoMovies/deleteMovie',
                request_serializer=movies__pb2.Request.SerializeToString,
                response_deserializer=movies__pb2.Response.FromString,
                )
        self.getAllMovies = channel.unary_unary(
                '/mongomovies.MongoMovies/getAllMovies',
                request_serializer=movies__pb2.Request.SerializeToString,
                response_deserializer=movies__pb2.Response.FromString,
                )
        self.createMovie = channel.unary_unary(
                '/mongomovies.MongoMovies/createMovie',
                request_serializer=movies__pb2.Request.SerializeToString,
                response_deserializer=movies__pb2.Response.FromString,
                )
        self.updateMovie = channel.unary_unary(
                '/mongomovies.MongoMovies/updateMovie',
                request_serializer=movies__pb2.Request.SerializeToString,
                response_deserializer=movies__pb2.Response.FromString,
                )
        self.getMoviesByGenre = channel.unary_unary(
                '/mongomovies.MongoMovies/getMoviesByGenre',
                request_serializer=movies__pb2.Request.SerializeToString,
                response_deserializer=movies__pb2.Response.FromString,
                )
        self.getMoviesByActor = channel.unary_unary(
                '/mongomovies.MongoMovies/getMoviesByActor',
                request_serializer=movies__pb2.Request.SerializeToString,
                response_deserializer=movies__pb2.Response.FromString,
                )


class MongoMoviesServicer(object):
    """serviço
    """

    def getMoviesById(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllMovies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateMovie(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMoviesByGenre(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMoviesByActor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MongoMoviesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getMoviesById': grpc.unary_unary_rpc_method_handler(
                    servicer.getMoviesById,
                    request_deserializer=movies__pb2.Request.FromString,
                    response_serializer=movies__pb2.Response.SerializeToString,
            ),
            'deleteMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteMovie,
                    request_deserializer=movies__pb2.Request.FromString,
                    response_serializer=movies__pb2.Response.SerializeToString,
            ),
            'getAllMovies': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllMovies,
                    request_deserializer=movies__pb2.Request.FromString,
                    response_serializer=movies__pb2.Response.SerializeToString,
            ),
            'createMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.createMovie,
                    request_deserializer=movies__pb2.Request.FromString,
                    response_serializer=movies__pb2.Response.SerializeToString,
            ),
            'updateMovie': grpc.unary_unary_rpc_method_handler(
                    servicer.updateMovie,
                    request_deserializer=movies__pb2.Request.FromString,
                    response_serializer=movies__pb2.Response.SerializeToString,
            ),
            'getMoviesByGenre': grpc.unary_unary_rpc_method_handler(
                    servicer.getMoviesByGenre,
                    request_deserializer=movies__pb2.Request.FromString,
                    response_serializer=movies__pb2.Response.SerializeToString,
            ),
            'getMoviesByActor': grpc.unary_unary_rpc_method_handler(
                    servicer.getMoviesByActor,
                    request_deserializer=movies__pb2.Request.FromString,
                    response_serializer=movies__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mongomovies.MongoMovies', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MongoMovies(object):
    """serviço
    """

    @staticmethod
    def getMoviesById(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mongomovies.MongoMovies/getMoviesById',
            movies__pb2.Request.SerializeToString,
            movies__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mongomovies.MongoMovies/deleteMovie',
            movies__pb2.Request.SerializeToString,
            movies__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllMovies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mongomovies.MongoMovies/getAllMovies',
            movies__pb2.Request.SerializeToString,
            movies__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mongomovies.MongoMovies/createMovie',
            movies__pb2.Request.SerializeToString,
            movies__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateMovie(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mongomovies.MongoMovies/updateMovie',
            movies__pb2.Request.SerializeToString,
            movies__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMoviesByGenre(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mongomovies.MongoMovies/getMoviesByGenre',
            movies__pb2.Request.SerializeToString,
            movies__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMoviesByActor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mongomovies.MongoMovies/getMoviesByActor',
            movies__pb2.Request.SerializeToString,
            movies__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
